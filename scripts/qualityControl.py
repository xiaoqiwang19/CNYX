import argparse
import json

parser = argparse.ArgumentParser()
parser.add_argument('-j', '--fastpJson', help="json file generated by fastp", type=str)
parser.add_argument('-b', '--bed', help="bed file for target region", type=str)
parser.add_argument('-c', '--coverageFile', help="coverage stat file", type=str)
parser.add_argument('-o', '--outfile', help="the output file", type=str)
args = parser.parse_args()


def to_percentage_string(decimal):
    return f"{decimal * 100:.2f}%"


def get_fastp_info(fastpJson=args.fastpJson):
    fastpDict = json.load(open(fastpJson))

    bfDict = fastpDict["summary"]['before_filtering']
    afDict = fastpDict["summary"]['after_filtering']
    filterDict = fastpDict['filtering_result']

    outputDict = dict()
    outputDict['raw_reads'] = bfDict['total_reads']
    outputDict['low_quality_reads'] = filterDict['low_quality_reads'] 
    outputDict['low_quality_reads_rate'] = to_percentage_string(
                                          filterDict['low_quality_reads']/bfDict['total_reads'] )  
    outputDict['too_many_N_reads'] = filterDict['too_many_N_reads']
    outputDict['N_reads_rate'] = to_percentage_string(
                                  filterDict['too_many_N_reads']/bfDict['total_reads'] )   
    outputDict['too_short_reads'] = filterDict['too_short_reads']
    outputDict['short_reads_rate'] = to_percentage_string(
                                     filterDict['too_short_reads']/bfDict['total_reads'] )
    outputDict['too_long_reads'] = filterDict['too_long_reads']
    outputDict['long_reads_rate'] = to_percentage_string(
                                    filterDict['too_long_reads']/bfDict['total_reads'] ) 
    outputDict['adapter_trimmed_reads'] = fastpDict['adapter_cutting']['adapter_trimmed_reads']    
    outputDict['adapter_trimmed_reads_rate'] =  to_percentage_string(
                                               fastpDict['adapter_cutting']['adapter_trimmed_reads']/bfDict['total_reads'] )
    outputDict['adapter_trimmed_bases'] = fastpDict['adapter_cutting']['adapter_trimmed_bases']
    outputDict['adapter_trimmed_bases_rate'] =  to_percentage_string(
                                               fastpDict['adapter_cutting']['adapter_trimmed_bases']/bfDict['total_reads'] )
    outputDict['clean_reads'] = filterDict['passed_filter_reads']
    outputDict['clean_reads_rate'] = to_percentage_string(
                                    filterDict['passed_filter_reads'] / outputDict['raw_reads'])
    outputDict['raw_bases(M)'] = round(bfDict['total_bases'] / 1e6, 2)
    outputDict['raw_bases_q20_rate'] = to_percentage_string(bfDict['q20_rate'])
    outputDict['raw_bases_q30_rate'] = to_percentage_string(bfDict['q30_rate'])
    outputDict['clean_bases_rate'] = to_percentage_string(
                                    afDict['total_bases'] / bfDict['total_bases'])
    outputDict['clean_bases(M)'] = round(afDict['total_bases'] / 1e6, 2)
    outputDict['clean_bases_q20_rate'] = to_percentage_string(afDict['q20_rate'])
    outputDict['clean_bases_q30_rate'] = to_percentage_string(afDict['q30_rate'])    
    outputDict['dup_rate'] = to_percentage_string(fastpDict['duplication']['rate'])
    outputDict['GC_content_raw'] = to_percentage_string( bfDict['gc_content'] )
    outputDict['GC_content_clean'] = to_percentage_string( afDict['gc_content'] )
    return outputDict


def get_align_info(map_dict, coverageFile=args.coverageFile):
    inputDict = dict()
    with open(coverageFile) as cf:
        for line in cf:
            line = line.strip()
            if not line.startswith('##'):
                k, v = line.split('\t')
                inputDict[k] = v
    outputDict = dict()
    for k, v in map_dict.items():
        if type(v) is str:
            outputDict[k] = inputDict[v]
        else:
            outputDict[k] = v(outputDict)
    return outputDict


def get_bed_size(path):
    pos_set = set()
    with open(path) as f:
        for line in f:
            if line.startswith('#'):
                continue
            chrome, start, end = line.split()[:3]
            for pos in range(int(start), int(end) + 1):
                pos_set.add((chrome, pos))
    return len(pos_set)


if __name__ == '__main__':
    map_dict = {
        # "total_reads": "[Total] Raw Reads (All reads)",
        "clean_reads": "[Total] Paired Reads",
        "mapped_reads": "[Total] Mapped Reads",
        "mapped_reads_rate":
            lambda x: to_percentage_string(int(x['mapped_reads'])/int(x['clean_reads'])),
        "total_bases(M)": "[Total] Raw Data(Mb)",
        "mapped_bases(M)": "[Total] Mapped Data(Mb)",
        "mapped_bases_rate": "[Total] Fraction of Mapped Data(Mb)",
        "duplicate_rate"  : "[Total] Fraction of PCR duplicate reads", 
        "forward_strand_reads": "[Total] forward strand reads",
        "backward_strand_reads": "[Total] backward strand reads",
        "map_quality_20": "[Total] MapQuality above cutoff reads",
        "map_quality_20_rate": "[Total] Fraction of MapQ reads in all reads",
        "target_region_size_bamdst" : "[Target] Len of region",    
        "target_region_size": lambda x: get_bed_size(args.bed),
        "target_bases(M)": "[Target] Target Data(Mb)",
        "target_bases_rate_raw": "[Target] Fraction of Target Data in all data",
        "target_bases_rate_map" : "[Target] Fraction of Target Data in mapped data",
        "average_depth": "[Target] Average depth",
        "coverage_1x": "[Target] Coverage (>0x)",
        "coverage_10x": "[Target] Coverage (>=10x)",
        "coverage_30x": "[Target] Coverage (>=30x)",
        "coverage_100x": "[Target] Coverage (>=100x)",
        "coverage_500x": "[Target] Coverage (>=500x)"
    }

    with open(args.outfile, 'w') as f:
        for k, v in get_fastp_info().items():
            print(f'fastp\t{k}\t{v}', file=f)
        for k, v in get_align_info(map_dict).items():
            print(f'bamdst\t{k}\t{v}', file=f)
